{"version":3,"sources":["controls-config.ts","managers/asset-manager.ts","managers/game-manager.ts","classes/laser-beam.ts","managers/laser-manager.ts","managers/death-star-manager.ts","components/x-wing-scene.tsx","App.tsx","index.tsx"],"names":["ControlsConfig","RollLeft","RollRight","AssetManager","flyCamera","xwingMesh","deathStarMeshes","scene","canvas","pewSound","introAudio","outroAudio","deathStarGroupCollisionmesh","GameManager","isPaused","screenCapHasClicked","LaserBeam","laserMesh","frameRate","startPosition","Vector3","Up","endPosition","forwardDirection","displacement","unitVec","frameCounter","maxFrame","laserMoveIncrement","isAHit","createLaserBeam","laserMaterial","StandardMaterial","specularPower","diffuseColor","Color3","FromHexString","emissiveColor","useEmissiveAsIllumination","material","core","addIncludedOnlyMesh","alignWithNormal","getForwardRay","direction","position","clone","forwardRay","normalizeToNew","intersectsMesh","hit","advanceBeamPosition","LaserManager","removeLaser","dispose","add","scale","this","MeshBuilder","CreateCylinder","diameter","height","laserBeams","fireLaser","push","laser","laserIndex","indexOf","splice","advanceLaserBeamPositions","forEach","lb","DeathStarManager","setupDeathStars","deathStarMesh","name","i","newDeathStar","deathStarLevel","xPos","randY","Math","abs","random","rotation","scaling","CreateBox","XWingScene","useState","leftPressed","setLeftPressed","rightPressed","setRightPressed","introEnded","getEngine","getRenderingCanvas","addEventListener","event","requestPointerLock","msRequestPointerLock","mozRequestPointerLock","webkitRequestPointerLock","createPointerLock","lockedTarget","undefined","inputs","addMouse","addKeyboard","keysUp","keysLeft","keysRight","speed","inertia","parent","Grid","container","flexDirection","item","alignItems","Button","color","variant","href","target","style","maxWidth","src","Paper","elevation","antialias","adaptToDeviceRatio","canvasId","beforeRender","rotationSpeed","z","onSceneMount","args","Sound","loop","autoplay","onended","SceneLoader","ImportMeshAsync","then","result","meshes","actionManager","ActionManager","onPointerObservable","pointerInfo","type","PointerEventTypes","POINTERDOWN","play","registerAction","ExecuteCodeAction","OnKeyDownTrigger","evt","sourceEvent","config","key","toLowerCase","OnKeyUpTrigger","onCreated","camera","clear","bankedTurn","rollCorrect","bankedTurnMultiplier","noRotationConstraint","intensity","size","rootUrl","App","Container","justifyContent","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.443d98b9.chunk.js","sourcesContent":["\r\nclass ControlsConfig {\r\n    RollLeft:string = 'a';\r\n    RollRight:string =  'd';   \r\n}\r\n\r\nexport default ControlsConfig;","import { AbstractMesh, FlyCamera, Mesh, Nullable, Scene, Sound } from \"@babylonjs/core\";\r\n\r\nexport default class AssetManager {\r\n\r\n    static flyCamera: FlyCamera | undefined;\r\n    static xwingMesh: AbstractMesh | undefined;\r\n    static deathStarMeshes: Nullable<AbstractMesh>[] = [];\r\n    static scene: Scene | undefined;\r\n    static canvas: HTMLCanvasElement | undefined;\r\n    static pewSound: Sound | undefined;\r\n    static introAudio: Sound | undefined;\r\n    static outroAudio: Sound | undefined;\r\n    static deathStarGroupCollisionmesh: Mesh | undefined;\r\n}","export default class GameManager {\r\n    static isPaused: boolean = true;\r\n    static screenCapHasClicked: boolean = false;\r\n}","import { Color3, FlyCamera, Mesh, MeshBuilder, Scene, StandardMaterial, Vector3 } from \"@babylonjs/core\";\r\nimport * as core from \"@babylonjs/core\";\r\nimport { LaserManager } from \"../managers/laser-manager\";\r\nimport AssetManager from \"../managers/asset-manager\";\r\n\r\nexport class LaserBeam {\r\n\r\n    laserMesh: Mesh;\r\n    frameRate: number = 20;\r\n    flyCamera: FlyCamera;\r\n    scene: Scene;\r\n    startPosition: Vector3 = Vector3.Up();\r\n    endPosition: Vector3 = Vector3.Up();\r\n    forwardDirection: Vector3 = Vector3.Up();\r\n    displacement: number = 0;\r\n    unitVec: Vector3 = Vector3.Up();\r\n    frameCounter: number = 0;\r\n    maxFrame: number = 60;\r\n    laserMoveIncrement: number = 8;\r\n    isAHit: boolean = false;\r\n\r\n    constructor(flyCamera: FlyCamera, scene: Scene) {\r\n        this.flyCamera = flyCamera;\r\n        this.scene = scene;\r\n        this.laserMesh = MeshBuilder.CreateCylinder('laser_times', {\r\n            diameter: 1,\r\n            height: 2\r\n        }, this.scene);\r\n\r\n        this.createLaserBeam();\r\n    }\r\n\r\n    createLaserBeam = (): void => {\r\n\r\n        const laserMaterial = new StandardMaterial(\"material\", this.scene);\r\n        laserMaterial.specularPower = 5;\r\n        laserMaterial.diffuseColor = Color3.FromHexString('#ff0000');\r\n        laserMaterial.emissiveColor = Color3.FromHexString('#ff0000');\r\n        laserMaterial.useEmissiveAsIllumination = true;\r\n        this.laserMesh.material = laserMaterial;\r\n\r\n        const glowLayer = new core.GlowLayer(\"glow\", this.scene);\r\n        glowLayer.addIncludedOnlyMesh(this.laserMesh);\r\n        \r\n        this.laserMesh.alignWithNormal(this.flyCamera.getForwardRay().direction);\r\n        this.startPosition = this.flyCamera.position.clone();\r\n        this.laserMesh.position = this.startPosition;\r\n        const forwardRay = this.flyCamera.getForwardRay(4000).clone();\r\n        this.forwardDirection = forwardRay.direction.normalizeToNew();\r\n        if(AssetManager.deathStarGroupCollisionmesh) {\r\n            this.isAHit = forwardRay.intersectsMesh(AssetManager.deathStarGroupCollisionmesh).hit;\r\n        }        \r\n    };\r\n\r\n    advanceBeamPosition = (): void => {\r\n\r\n        if(this.frameCounter > this.maxFrame) {\r\n            if(this.laserMesh) {\r\n                LaserManager.removeLaser(this);\r\n                this.laserMesh.dispose();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.laserMesh.position = this.startPosition.add(this.forwardDirection.scale(this.displacement));\r\n        this.displacement += this.laserMoveIncrement;\r\n        this.frameCounter ++;\r\n    };\r\n}","import { FlyCamera, Scene } from \"@babylonjs/core\";\r\nimport { LaserBeam } from \"../classes/laser-beam\";\r\nimport AssetManager from \"./asset-manager\";\r\n\r\nexport class LaserManager {\r\n    static laserBeams: LaserBeam[] = [];\r\n\r\n    static fireLaser = (): void => {\r\n        if(AssetManager.flyCamera &&  AssetManager.scene) {\r\n           LaserManager.laserBeams.push(new LaserBeam(AssetManager.flyCamera, AssetManager.scene));\r\n        }\r\n    };\r\n\r\n    static removeLaser = (laser: LaserBeam): void => {\r\n        const laserIndex: number = LaserManager.laserBeams.indexOf(laser);\r\n        if(laserIndex > -1) {\r\n            LaserManager.laserBeams.splice(laserIndex, 1);\r\n        }\r\n    };\r\n\r\n    static advanceLaserBeamPositions = (): void => {\r\n        LaserManager.laserBeams.forEach((lb) => {\r\n            if(lb.laserMesh) {\r\n                lb.advanceBeamPosition();\r\n            }            \r\n        });\r\n    };\r\n}","import \"../styles.css\";\r\nimport * as core from \"@babylonjs/core\";\r\nimport { AbstractMesh, MeshBuilder } from \"@babylonjs/core\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport \"@babylonjs/loaders\";\r\nimport AssetManager from \"../managers/asset-manager\";\r\n\r\nexport default class DeathStarManager {\r\n\r\n    static setupDeathStars = (deathStarMesh: AbstractMesh) => {\r\n\r\n        const xIncrement: number = 100;\r\n        const groupOffsetX: number = 400;\r\n        const groupOffsetY: number = 200;\r\n        const groupZ: number = 1000;\r\n        const scale: number = 3;\r\n        const { deathStarMeshes } = AssetManager;\r\n\r\n        deathStarMesh.name = 'deathstar0';\r\n        deathStarMeshes?.push(deathStarMesh);\r\n\r\n        for (let i: number = 0; i < 49; i++) {\r\n            const newDeathStar = deathStarMesh.clone('deathstar' + (i + 1), null, false);\r\n            deathStarMeshes.push(newDeathStar);\r\n        }\r\n\r\n        let deathStarLevel = 0;\r\n        let xPos = 0;\r\n\r\n        for (let i: number = 0; i < 50; i++) {\r\n            const newDeathStar = deathStarMeshes[i];\r\n\r\n            if (i > 0 && i % 10 === 0) {\r\n                deathStarLevel += xIncrement;\r\n                xPos = 0;\r\n            }\r\n\r\n            if (newDeathStar !== null) {\r\n                xPos += xIncrement;\r\n                let randY = Math.abs(Math.random() * 7) + 90;\r\n\r\n                deathStarMeshes.push(newDeathStar);\r\n                newDeathStar.position = new Vector3(xPos - groupOffsetX, deathStarLevel - groupOffsetY, groupZ);\r\n                newDeathStar.rotation = new Vector3(0, randY, 0);\r\n                newDeathStar.scaling = new Vector3(scale, scale, scale);\r\n            }\r\n        }\r\n\r\n        if (deathStarMeshes[0] && deathStarMeshes[24]) {\r\n            AssetManager.deathStarGroupCollisionmesh = MeshBuilder.CreateBox(\"ds_collider\");\r\n            const { deathStarGroupCollisionmesh } = AssetManager;\r\n            deathStarGroupCollisionmesh.material = new core.StandardMaterial(\"dt_collision\", AssetManager.scene);\r\n            deathStarGroupCollisionmesh.scaling = new Vector3(1000, 600, 100);\r\n            deathStarGroupCollisionmesh.position = deathStarMeshes[24].position;\r\n        }\r\n    }\r\n}","import \"../styles.css\";\r\nimport { Engine, Scene, SceneEventArgs, Skybox } from \"react-babylonjs\";\r\nimport * as core from \"@babylonjs/core\";\r\nimport { ActionManager, ExecuteCodeAction, ISceneLoaderAsyncResult, PointerEventTypes, SceneLoader, Sound } from \"@babylonjs/core\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport \"@babylonjs/loaders\";\r\nimport { useState } from \"react\";\r\nimport ControlsConfig from \"../controls-config\";\r\nimport AssetManager from \"../managers/asset-manager\";\r\nimport GameManager from \"../managers/game-manager\";\r\nimport { Button, Grid, Paper } from \"@mui/material\";\r\nimport { LaserManager } from \"../managers/laser-manager\";\r\nimport DeathStarManager from \"../managers/death-star-manager\";\r\n\r\nexport default function XWingScene() {\r\n\r\n    const [leftPressed, setLeftPressed] = useState(false);\r\n    const [rightPressed, setRightPressed] = useState(false);\r\n\r\n    const cameraCreated = (camera: core.FlyCamera, scene: core.Scene) => {\r\n\r\n        AssetManager.flyCamera = camera;\r\n        camera.lockedTarget = AssetManager.deathStarMeshes[24];\r\n        camera.inputs.clear();\r\n    };\r\n\r\n    // is called every frame\r\n    const sceneBeforeRender = () => {\r\n        if (!GameManager.isPaused) {\r\n\r\n            LaserManager.advanceLaserBeamPositions();\r\n\r\n            const { xwingMesh, flyCamera } = AssetManager;\r\n            if (xwingMesh && flyCamera) {\r\n\r\n                const rotationSpeed: number = 0.03;\r\n\r\n                if (leftPressed) {\r\n                    xwingMesh.rotation.z += rotationSpeed;\r\n                    flyCamera.rotation.z += rotationSpeed;\r\n                }\r\n\r\n                if (rightPressed) {\r\n                    xwingMesh.rotation.z -= rotationSpeed;\r\n                    flyCamera.rotation.z -= rotationSpeed;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const createPointerLock = (scene: core.Scene | undefined) => {\r\n        const canvas = scene?.getEngine().getRenderingCanvas();\r\n\r\n        if (canvas) {\r\n            canvas.addEventListener(\"click\", event => {\r\n                canvas.requestPointerLock = canvas.requestPointerLock || canvas.msRequestPointerLock || canvas.mozRequestPointerLock || canvas.webkitRequestPointerLock;\r\n                if (canvas.requestPointerLock) {\r\n                    canvas.requestPointerLock();\r\n                }\r\n            }, false);\r\n        }\r\n    };\r\n\r\n    const introEnded = () => {\r\n\r\n        const { flyCamera, xwingMesh, scene } = AssetManager;\r\n\r\n        createPointerLock(scene);\r\n\r\n        if (flyCamera) {\r\n            flyCamera.lockedTarget = undefined;\r\n            flyCamera.inputs.addMouse();\r\n            flyCamera.inputs.addKeyboard();\r\n            flyCamera.keysUp.push(87);\r\n            flyCamera.keysLeft = [];\r\n            flyCamera.keysRight = [];\r\n            flyCamera.speed = 4;\r\n            flyCamera.inertia = 0.87;\r\n        }\r\n\r\n        if (xwingMesh && flyCamera) {\r\n            xwingMesh.parent = flyCamera;\r\n        }\r\n\r\n        GameManager.isPaused = false;\r\n    }\r\n\r\n    const fireLaser = () => {\r\n        LaserManager.fireLaser();\r\n    };\r\n\r\n    const onSceneMount = (args: SceneEventArgs) => {\r\n\r\n        AssetManager.scene = args.scene;\r\n        AssetManager.canvas = args.canvas;\r\n        const { scene } = AssetManager;\r\n\r\n        GameManager.isPaused = true;\r\n        AssetManager.pewSound = new Sound('pew', '/static/sounds/PEW.mp3', scene, null, { loop: false, autoplay: false });\r\n        AssetManager.introAudio = new Sound('intro', '/static/sounds/PEW.mp3', scene, null, { loop: false, autoplay: true });\r\n        AssetManager.outroAudio = new Sound('outro', '/static/sounds/outro.mp3', scene, null, { loop: false, autoplay: false });\r\n        AssetManager.introAudio.onended = introEnded;\r\n\r\n        SceneLoader.ImportMeshAsync('', '/static/3dmodels/', 'xwing.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n                AssetManager.xwingMesh = result.meshes[0];\r\n            });\r\n\r\n        SceneLoader.ImportMeshAsync('', '/static/3dmodels/', 'deathstar.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n                DeathStarManager.setupDeathStars(result.meshes[0]);\r\n            });\r\n\r\n        scene.actionManager = new ActionManager(scene);\r\n\r\n        scene.onPointerObservable.add((pointerInfo: core.PointerInfo) => {\r\n\r\n            if (!GameManager.isPaused) {\r\n                switch (pointerInfo.type) {\r\n                    case PointerEventTypes.POINTERDOWN: {\r\n                        if (GameManager.screenCapHasClicked) {\r\n                            AssetManager.pewSound?.play(0);\r\n                            fireLaser();\r\n                        }\r\n\r\n                        //do not register the first click. it is the screen cap click.\r\n                        GameManager.screenCapHasClicked = true;\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        // keydown\r\n        scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyDownTrigger, function (evt) {\r\n            if (evt.sourceEvent.type == \"keydown\" && !GameManager.isPaused) {\r\n\r\n                const config = new ControlsConfig();\r\n                switch (evt.sourceEvent.key.toLowerCase()) {\r\n                    case config.RollLeft: {\r\n                        setLeftPressed(true);\r\n                        break;\r\n                    }\r\n                    case config.RollRight: {\r\n                        setRightPressed(true);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        // keyup\r\n        scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyUpTrigger, function (evt) {\r\n            if (evt.sourceEvent.type == \"keyup\" && !GameManager.isPaused) {\r\n\r\n                const config = new ControlsConfig();\r\n                switch (evt.sourceEvent.key.toLowerCase()) {\r\n                    case config.RollLeft: {\r\n                        setLeftPressed(false);\r\n                        break;\r\n                    }\r\n                    case config.RollRight: {\r\n                        setRightPressed(false);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Grid container flexDirection={\"column\"}>\r\n            <Grid item alignItems={\"flex-start\"}>\r\n                <Button color={\"info\"} variant=\"contained\" href=\"https://github.com/master0000blaster/get-them-deathstars\" target={\"_blank\"} >\r\n                    <img style={{ maxWidth: 50 }} src=\"/static/images/GitHub_Logo.png\" />\r\n                    Project\r\n                </Button>\r\n            </Grid>\r\n            <Grid item>\r\n                <Paper elevation={2}>\r\n                    <Engine antialias adaptToDeviceRatio canvasId=\"xwing-canvas\">\r\n                        <Scene beforeRender={sceneBeforeRender} onSceneMount={onSceneMount}>\r\n                            <flyCamera onCreated={cameraCreated} name=\"xwingcamera\"\r\n                                position={new Vector3(0, 0, -30)}\r\n                                bankedTurn={true}\r\n                                rollCorrect={0}\r\n                                bankedTurnMultiplier={2}\r\n                                noRotationConstraint={true}\r\n                            />\r\n                            <hemisphericLight\r\n                                name=\"light1\"\r\n                                intensity={0.7}\r\n                                direction={new Vector3(0.5, 1, 0)}\r\n                            />\r\n                            <Skybox size={10000} rootUrl=\"/static/images/space-skybox/\" name={'skybox'} />\r\n                        </Scene>\r\n                    </Engine>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import { Container, Grid } from \"@mui/material\";\nimport XWingScene from \"./components/x-wing-scene\";\n\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container item direction=\"column\" alignItems={'center'} justifyContent={'space-around'}>\n        <Grid item>\n          <XWingScene />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);"],"sourceRoot":""}