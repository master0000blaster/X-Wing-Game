{"version":3,"sources":["enums/mesh-types.ts","components/spinning-mesh.tsx","components/demo-scene.tsx","components/x-wing-scene.tsx","App.tsx","index.tsx"],"names":["MeshTypes","SpinningMesh","props","useState","clicked","setClicked","hovered","setHovered","defaultScale","Vector3","largeScale","boxRef","useRef","useClick","useHover","useBeforeRender","scene","current","rpm","rotationSpeed","deltaTimeMillis","getEngine","getDeltaTime","rotationAmount","Math","PI","rotation","y","x","meshType","Cube","name","ref","size","position","scaling","diffuseColor","hoveredColor","color","specularColor","Color3","White","specularPower","diameterTop","height","diameterBottom","tessellation","DemoScene","meshColor","meshColorHover","antialias","adaptToDeviceRatio","canvasId","target","Zero","alpha","beta","radius","intensity","brightness","direction","Up","FromHexString","Cone","skyboxVisible","rootUrl","XWingScene","cameraRef","xwingMeshRef","deathstarMeshRef","s","onSceneMount","args","SceneLoader","ImportMeshAsync","then","result","meshes","lockedTarget","App","tabIndex","setTabIndex","setBrightness","setRotationSpeed","setSkyboxVisible","rotationSpeedMax","Container","maxWidth","Tabs","value","onChange","event","newTabIndex","Tab","label","Paper","id","elevation","Grid","container","item","alignItems","justifyContent","className","Slider","newValue","step","defaultValue","max","min","valueLabelDisplay","spacing","xs","Input","Number","onBlur","inputProps","type","FormControlLabel","control","Switch","checked","Typography","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.c238c1bc.chunk.js","sourcesContent":["enum MeshTypes {\r\n    Cube = 1,\r\n    Cone = 2\r\n}\r\n\r\nexport default MeshTypes;","import \"../styles.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useBeforeRender, useClick, useHover } from \"react-babylonjs\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport MeshTypes from \"../enums/mesh-types\";\r\n\r\ninterface SpinningMeshProps {\r\n  name: string;\r\n  position: Vector3;\r\n  hoveredColor: Color3;\r\n  color: Color3;\r\n  meshType: MeshTypes;\r\n  rotationSpeed: number;\r\n};\r\n\r\nexport default function SpinningMesh(props: SpinningMeshProps) {\r\n\r\n  const [clicked, setClicked] = useState(false);\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  const defaultScale: Vector3 = new Vector3(1, 1, 1);\r\n  const largeScale: Vector3 = new Vector3(1.25, 1.25, 1.25);\r\n\r\n  // access Babylon scene objects with same React hook as regular DOM elements\r\n  const boxRef = useRef<Mesh>(null);\r\n\r\n  useClick(() => setClicked((clicked) => !clicked), boxRef);\r\n\r\n  useHover(\r\n    () => setHovered(true),\r\n    () => setHovered(false),\r\n    boxRef\r\n  );\r\n\r\n  // Rotate the box every frame. \r\n  useBeforeRender((scene) => {\r\n    if (boxRef.current) {\r\n\r\n      const rpm: number = props.rotationSpeed;\r\n\r\n      // Delta time smoothes the animation.\r\n      const deltaTimeMillis: number = scene.getEngine().getDeltaTime();\r\n      const rotationAmount: number = (rpm / 60) * Math.PI * 2 * (deltaTimeMillis / 1000);\r\n\r\n      boxRef.current.rotation.y += rotationAmount;\r\n      boxRef.current.rotation.x += rotationAmount / 2.5;\r\n    }\r\n  });\r\n\r\n  if (props.meshType === MeshTypes.Cube) {\r\n    return (\r\n      <box\r\n        name={props.name}\r\n        ref={boxRef}\r\n        size={2}\r\n        position={props.position}\r\n        scaling={clicked ? largeScale : defaultScale}>\r\n        <standardMaterial\r\n          name={`${props.name}-mat`}\r\n          diffuseColor={hovered ? props.hoveredColor : props.color}\r\n          specularColor={Color3.White()} specularPower={3} />\r\n      </box>\r\n    );\r\n  } else {\r\n    return (\r\n      <cylinder diameterTop={0} height={3} diameterBottom={3} tessellation={96}\r\n        name={props.name}\r\n        ref={boxRef}\r\n        position={props.position}\r\n        scaling={clicked ? largeScale : defaultScale}>\r\n        <standardMaterial\r\n          name={`${props.name}-mat`}\r\n          diffuseColor={hovered ? props.hoveredColor : props.color}\r\n          specularColor={Color3.White()} specularPower={3} />\r\n      </cylinder>\r\n    );\r\n  }\r\n};","import \"../styles.css\";\r\nimport { Engine, Scene, Skybox } from \"react-babylonjs\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport SpinningMesh from \"./spinning-mesh\";\r\nimport MeshTypes from \"../enums/mesh-types\";\r\n\r\ninterface DemoSceneProps {\r\n  rotationSpeed: number;\r\n  brightness: number;\r\n  skyboxVisible: boolean;\r\n};\r\n\r\nexport default function DemoScene(props: DemoSceneProps) {\r\n\r\n  const meshColor: string = '#66e8ff';\r\n  const meshColorHover: string = '#6689af';\r\n\r\n  return (\r\n    <div>\r\n      <Engine antialias adaptToDeviceRatio canvasId=\"demo-3d-canvas\">\r\n        <Scene>\r\n          <arcRotateCamera\r\n            name=\"camera1\"\r\n            target={Vector3.Zero()}\r\n            alpha={Math.PI / 2}\r\n            beta={Math.PI / 4}\r\n            radius={8}\r\n          />\r\n          <hemisphericLight\r\n            name=\"light1\"\r\n            intensity={props.brightness}\r\n            direction={Vector3.Up()}\r\n          />\r\n          <SpinningMesh\r\n            name=\"cube1\"\r\n            rotationSpeed={props.rotationSpeed}\r\n            meshType={MeshTypes.Cube}\r\n            position={new Vector3(-2, 0, 0)}\r\n            color={Color3.FromHexString(meshColor)}\r\n            hoveredColor={ Color3.FromHexString(meshColorHover)}\r\n          />\r\n          <SpinningMesh\r\n            name=\"cube2\"\r\n            rotationSpeed={props.rotationSpeed}\r\n            meshType={MeshTypes.Cone}\r\n            position={new Vector3(2, 0, 0)}\r\n            color={Color3.FromHexString(meshColor)}\r\n            hoveredColor={ Color3.FromHexString(meshColorHover)}\r\n          />\r\n          {props.skyboxVisible && (\r\n            <Skybox rootUrl=\"http://www.react3d.com/React3dBuild/static/images/skybox/\" name={'skybox'} />\r\n          )}\r\n        </Scene>\r\n      </Engine>\r\n    </div>\r\n  );\r\n}\r\n","import \"../styles.css\";\r\nimport {useBeforeRender, Engine, Scene, SceneEventArgs, Skybox } from \"react-babylonjs\";\r\n//import * as core from \"@babylonjs/core\";\r\nimport { AbstractMesh, FollowCamera, ISceneLoaderAsyncResult, SceneLoader } from \"@babylonjs/core\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport \"@babylonjs/loaders\";\r\nimport { useRef, useState } from \"react\";\r\n\r\ninterface XWingSceneProps {\r\n};\r\n\r\nexport default function XWingScene(props: XWingSceneProps) {\r\n\r\n    const cameraRef = useRef<FollowCamera>(null);\r\n    const xwingMeshRef = useRef<AbstractMesh>();\r\n    const deathstarMeshRef = useRef<AbstractMesh>();\r\n    //const sceneRef = useRef<core.Scene>();\r\n    // const [forwardPressed, setForwardPressed] = useState(false);\r\n    // const [reversePressed, setReversePressed] = useState(false);\r\n    // const [leftPressed, setLeftPressed] = useState(false);\r\n    // const [rightPressed, setRightPressed] = useState(false);\r\n\r\n    // is called every frame\r\n    useBeforeRender((s) => {\r\n        // if (xwingMeshRef.current) {\r\n\r\n        //     if (forwardPressed) {\r\n\r\n        //         //const deltaTimeMillis: number = scene.getEngine().getDeltaTime();\r\n        //         xwingMeshRef.current.position.x += 100;\r\n        //     }\r\n        // }\r\n\r\n        var foo = 3;\r\n    });\r\n\r\n    const onSceneMount = (args: SceneEventArgs) => {\r\n\r\n        const scene = args.scene;\r\n        //sceneRef.current = scene;\r\n\r\n        SceneLoader.ImportMeshAsync('', 'http://www.react3d.com/React3dBuild/static/3dmodels/', 'xwing.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n                if (cameraRef.current) {\r\n\r\n                    xwingMeshRef.current = result.meshes[0];\r\n                    cameraRef.current.lockedTarget = xwingMeshRef.current;\r\n                }\r\n            });\r\n\r\n        SceneLoader.ImportMeshAsync('', 'http://www.react3d.com/React3dBuild/static/3dmodels/', 'deathstar.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n\r\n                deathstarMeshRef.current = result.meshes[0];\r\n                deathstarMeshRef.current.position = new Vector3(20, 0, 400);\r\n            });\r\n\r\n        //scene.actionManager = new ActionManager(scene);\r\n\r\n        // // keydown\r\n        // scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyDownTrigger, function (evt) {\r\n        //     if (evt.sourceEvent.type == \"keydown\") {\r\n\r\n        //         const config = new ControlsConfig();\r\n        //         switch (evt.sourceEvent.key) {\r\n        //             case config.ThrottleUp: {\r\n        //                 setForwardPressed(true);\r\n        //                 break;\r\n        //             }\r\n        //             case config.ThrottleDown: {\r\n        //                 setReversePressed(true);\r\n        //                 break;\r\n        //             }\r\n        //             case config.RollLeft: {\r\n        //                 setLeftPressed(true);\r\n        //                 break;\r\n        //             }\r\n        //             case config.RollRight: {\r\n        //                 setRightPressed(true);\r\n        //                 break;\r\n        //             }\r\n        //             default: {\r\n        //                 break;\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }));\r\n\r\n        // // keyup\r\n        // scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyUpTrigger, function (evt) {\r\n        //     if (evt.sourceEvent.type == \"keyup\") {\r\n\r\n        //         const config = new ControlsConfig();\r\n        //         switch (evt.sourceEvent.key) {\r\n        //             case config.ThrottleUp: {\r\n        //                 setForwardPressed(false);\r\n        //                 break;\r\n        //             }\r\n        //             case config.ThrottleDown: {\r\n        //                 setReversePressed(false);\r\n        //                 break;\r\n        //             }\r\n        //             case config.RollLeft: {\r\n        //                 setLeftPressed(false);\r\n        //                 break;\r\n        //             }\r\n        //             case config.RollRight: {\r\n        //                 setRightPressed(false);\r\n        //                 break;\r\n        //             }\r\n        //             default: {\r\n        //                 break;\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Engine antialias adaptToDeviceRatio canvasId=\"xwing-canvas\">\r\n                <Scene onSceneMount={onSceneMount}>\r\n                    <followCamera ref={cameraRef} name=\"xwingcamera\"\r\n                        position={new Vector3(0, 6, -30)}\r\n                    //rotation={new Vector3(90, 90, 90)}\r\n                    //noRotationConstraint={true}\r\n                    />\r\n                    <hemisphericLight\r\n                        name=\"light1\"\r\n                        intensity={0.7}\r\n                        direction={new Vector3(0.5, 1, 0)}\r\n                    />\r\n                    <Skybox size={10000} rootUrl=\"http://www.react3d.com/React3dBuild/static/images/skybox/\" name={'skybox'} />\r\n                </Scene>\r\n            </Engine>\r\n        </div>\r\n    );\r\n}\r\n","import { Container, FormControlLabel, Grid, Input, Paper, Slider, Switch, Tab, Tabs, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport DemoScene from \"./components/demo-scene\";\nimport XWingScene from \"./components/x-wing-scene\";\n\n\nexport default function App() {\n\n  const [tabIndex, setTabIndex] = useState(0);\n  const [brightness, setBrightness] = useState(0.7);\n  const [rotationSpeed, setRotationSpeed] = useState(5);\n  const [skyboxVisible, setSkyboxVisible] = useState(true);\n\n  const rotationSpeedMax: number = 50;\n\n  const handleTabChange = (event, newTabIndex) => {\n    setTabIndex(newTabIndex);\n  };\n\n  const handleBrightnessChange = (event, newValue) => {\n    if (typeof newValue === 'number') {\n      setBrightness(newValue);\n    }\n  };\n\n  const handleSpeedChange = (event, newValue) => {\n    if (typeof newValue === 'number') {\n      setRotationSpeed(newValue);\n    }\n  };\n\n  const handleShowSkyboxChange = (event, checked) => {\n    setSkyboxVisible(checked);\n  };\n\n  const handleRotationInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value !== '') {\n      const value: number = Number(event.target.value);\n      if (value > rotationSpeedMax) {\n        setRotationSpeed(rotationSpeedMax);\n      } else {\n\n        setRotationSpeed(value);\n      }\n    }\n    else {\n      setRotationSpeed(0);\n    }\n  };\n\n  const handleRotationBlur = (event) => {\n    if (rotationSpeed < 0) {\n      setRotationSpeed(0);\n    } else if (rotationSpeed > rotationSpeedMax) {\n      setRotationSpeed(rotationSpeedMax);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Tabs value={tabIndex} onChange={handleTabChange} aria-label=\"Demos\">\n        <Tab label=\"X-Wing Game\" />\n        <Tab label=\"3D Demo\" />\n        <Tab label=\"Tab 3\" />\n        <Tab label=\"Tab 4\" />\n      </Tabs>\n      <Paper id='tab-content-container' elevation={2}>\n        <Grid container item direction=\"column\" alignItems={'center'} justifyContent={'space-around'}>\n          {tabIndex === 0 && (\n            <Grid item>\n              <XWingScene />\n            </Grid>\n          )}\n          {tabIndex === 1 && (\n            <Grid item>\n              <DemoScene skyboxVisible={skyboxVisible} brightness={brightness} rotationSpeed={rotationSpeed} />\n              <Grid className=\"form-control\">\n                Brightness\n                <Slider onChange={handleBrightnessChange} step={0.01} defaultValue={0.7} max={2} min={0} aria-label=\"Rotation Speed\" valueLabelDisplay=\"auto\" />\n              </Grid>\n              <Grid className=\"form-control\">\n                Rotation Speed\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs>\n                    <Slider value={rotationSpeed} onChange={handleSpeedChange} step={0.1} defaultValue={5} max={rotationSpeedMax} min={0} aria-label=\"Rotation Speed\" valueLabelDisplay=\"auto\" />\n                  </Grid>\n                  <Grid item>\n                    <Input value={rotationSpeed === 0 ? '' : rotationSpeed} size=\"small\" onChange={handleRotationInputChange} onBlur={handleRotationBlur} inputProps={{\n                      step: 1,\n                      min: 0,\n                      max: rotationSpeedMax,\n                      type: 'number',\n                    }}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid className=\"form-control\">\n                <FormControlLabel control={\n                  <Switch checked={skyboxVisible}\n                    onChange={handleShowSkyboxChange} />\n                } label=\"Show Skybox\" />\n              </Grid>\n            </Grid>\n          )}\n          {tabIndex === 2 && (\n            <Grid item>\n              <Typography>The third tab</Typography>\n            </Grid>\n          )}\n          {tabIndex === 3 && (\n            <Grid item>\n              <Typography>The fourth tab</Typography>\n            </Grid>\n          )}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);"],"sourceRoot":""}