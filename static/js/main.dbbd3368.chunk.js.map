{"version":3,"sources":["controls-config.ts","components/x-wing-scene.tsx","App.tsx","index.tsx"],"names":["ControlsConfig","RollLeft","RollRight","Fire","XWingScene","props","cameraRef","useRef","xwingMeshRef","deathstarMeshesRef","sceneRef","canvasRef","useState","leftPressed","setLeftPressed","rightPressed","setRightPressed","antialias","adaptToDeviceRatio","canvasId","beforeRender","current","rotationSpeed","rotation","z","onSceneMount","args","scene","canvas","getEngine","getRenderingCanvas","addEventListener","event","requestPointerLock","msRequestPointerLock","mozRequestPointerLock","webkitRequestPointerLock","createPointerLock","SceneLoader","ImportMeshAsync","then","result","meshes","parent","deathStarMesh","name","push","i","newDeathStar","clone","deathStarLevel","xPos","randY","Math","abs","random","position","Vector3","scaling","setupDeathStars","actionManager","ActionManager","registerAction","ExecuteCodeAction","OnKeyDownTrigger","evt","sourceEvent","type","config","key","OnKeyUpTrigger","onCreated","camera","inputs","clear","addMouse","addKeyboard","keysUp","keysLeft","keysRight","speed","inertia","ref","bankedTurn","rollCorrect","bankedTurnMultiplier","noRotationConstraint","intensity","direction","size","rootUrl","App","Container","maxWidth","Paper","id","elevation","Grid","container","item","alignItems","justifyContent","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.dbbd3368.chunk.js","sourcesContent":["\r\nclass ControlsConfig {\r\n    RollLeft:string = 'a';\r\n    RollRight:string =  'd';\r\n    Fire:string =  'leftmouse';    \r\n}\r\n\r\nexport default ControlsConfig;","import \"../styles.css\";\r\nimport { Engine, Scene, SceneEventArgs, Skybox } from \"react-babylonjs\";\r\nimport * as core from \"@babylonjs/core\";\r\nimport { AbstractMesh, ActionManager, ExecuteCodeAction, FlyCamera, ISceneLoaderAsyncResult, Nullable, SceneLoader } from \"@babylonjs/core\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport \"@babylonjs/loaders\";\r\nimport { useRef, useState } from \"react\";\r\nimport ControlsConfig from \"../controls-config\";\r\n\r\ninterface XWingSceneProps {\r\n};\r\n\r\nexport default function XWingScene(props: XWingSceneProps) {\r\n\r\n    const cameraRef = useRef<FlyCamera>(null);\r\n    const xwingMeshRef = useRef<AbstractMesh>();\r\n    const deathstarMeshesRef = useRef<Nullable<AbstractMesh>[]>([]);\r\n    const sceneRef = useRef<core.Scene>();\r\n    const canvasRef = useRef<HTMLCanvasElement>();\r\n    const [leftPressed, setLeftPressed] = useState(false);\r\n    const [rightPressed, setRightPressed] = useState(false);\r\n\r\n    const cameraCreated = (camera: core.FlyCamera, scene: core.Scene) => {        \r\n\r\n        camera.inputs.clear();\r\n        camera.inputs.addMouse();\r\n        camera.inputs.addKeyboard();\r\n        camera.keysUp.push(87);\r\n        camera.keysLeft = [];\r\n        camera.keysRight = [];\r\n        camera.speed = 12;\r\n        camera.inertia = 0.8;\r\n    };\r\n\r\n    // is called every frame\r\n    const sceneBeforeRender = () => {\r\n        if (xwingMeshRef.current && sceneRef.current && cameraRef.current) {\r\n\r\n            const rotationSpeed: number = 0.03;\r\n\r\n            if (leftPressed) {\r\n                xwingMeshRef.current.rotation.z += rotationSpeed;\r\n                cameraRef.current.rotation.z += rotationSpeed;\r\n            }\r\n\r\n            if (rightPressed) {\r\n                xwingMeshRef.current.rotation.z -= rotationSpeed;\r\n                cameraRef.current.rotation.z -= rotationSpeed;\r\n            }\r\n        }\r\n    };\r\n\r\n    function setupDeathStars(deathStarMesh: AbstractMesh) {\r\n\r\n        const xIncrement: number = 100;\r\n        const groupOffsetX: number = 400;\r\n        const groupOffsetY: number = 200;\r\n        const groupZ: number = 1000;\r\n        const scale: number = 3;\r\n\r\n        deathStarMesh.name = 'deathstar0';\r\n        deathstarMeshesRef.current.push(deathStarMesh);\r\n\r\n        for (let i: number = 0; i < 49; i++) {\r\n            const newDeathStar = deathStarMesh.clone('deathstar' + (i + 1), null, false);\r\n            deathstarMeshesRef.current.push(newDeathStar);\r\n        }\r\n\r\n        let deathStarLevel = 0;\r\n        let xPos = 0;\r\n\r\n        for (let i: number = 0; i < 50; i++) {\r\n            const newDeathStar = deathstarMeshesRef.current[i];\r\n\r\n            if (i > 0 && i % 10 === 0) {\r\n                deathStarLevel += xIncrement;\r\n                xPos = 0;\r\n            }\r\n\r\n            if (newDeathStar !== null) {\r\n                xPos += xIncrement;\r\n                let randY = Math.abs(Math.random() * 7) + 90;\r\n\r\n                deathstarMeshesRef.current.push(newDeathStar);\r\n                newDeathStar.position = new Vector3(xPos - groupOffsetX, deathStarLevel - groupOffsetY, groupZ);\r\n                newDeathStar.rotation = new Vector3(0, randY, 0);\r\n                newDeathStar.scaling = new Vector3(scale, scale, scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    const createPointerLock = function (scene: core.Scene) {\r\n        const canvas = scene.getEngine().getRenderingCanvas();\r\n\r\n        if (canvas) {\r\n            canvas.addEventListener(\"click\", event => {\r\n                canvas.requestPointerLock = canvas.requestPointerLock || canvas.msRequestPointerLock || canvas.mozRequestPointerLock || canvas.webkitRequestPointerLock;\r\n                if (canvas.requestPointerLock) {\r\n                    canvas.requestPointerLock();\r\n                }\r\n            }, false);\r\n        }\r\n    };\r\n\r\n    const onSceneMount = (args: SceneEventArgs) => {\r\n\r\n        const scene = args.scene;\r\n        sceneRef.current = scene;\r\n        canvasRef.current = args.canvas;\r\n\r\n        createPointerLock(scene);\r\n\r\n        SceneLoader.ImportMeshAsync('', '/get-them-deathstars/static/3dmodels/', 'xwing.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n                if (cameraRef.current) {\r\n                    xwingMeshRef.current = result.meshes[0];\r\n                    xwingMeshRef.current.parent = cameraRef.current;\r\n                }\r\n            });\r\n\r\n        SceneLoader.ImportMeshAsync('', '/get-them-deathstars/static/3dmodels/', 'deathstar.glb', scene)\r\n            .then((result: ISceneLoaderAsyncResult) => {\r\n                setupDeathStars(result.meshes[0]);\r\n            });\r\n\r\n        scene.actionManager = new ActionManager(scene);\r\n\r\n        // keydown\r\n        scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyDownTrigger, function (evt) {\r\n            if (evt.sourceEvent.type == \"keydown\") {\r\n\r\n                const config = new ControlsConfig();\r\n                switch (evt.sourceEvent.key) {\r\n                    case config.RollLeft: {\r\n                        setLeftPressed(true);\r\n                        break;\r\n                    }\r\n                    case config.RollRight: {\r\n                        setRightPressed(true);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        // keyup\r\n        scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyUpTrigger, function (evt) {\r\n            if (evt.sourceEvent.type == \"keyup\") {\r\n\r\n                const config = new ControlsConfig();\r\n                switch (evt.sourceEvent.key) {\r\n                    case config.RollLeft: {\r\n                        setLeftPressed(false);\r\n                        break;\r\n                    }\r\n                    case config.RollRight: {\r\n                        setRightPressed(false);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Engine antialias adaptToDeviceRatio canvasId=\"xwing-canvas\">\r\n                <Scene beforeRender={sceneBeforeRender} onSceneMount={onSceneMount}>\r\n                    <flyCamera onCreated={cameraCreated} ref={cameraRef} name=\"xwingcamera\"\r\n                        position={new Vector3(0, 0, -30)}\r\n                        bankedTurn={true}\r\n                        rollCorrect={0}\r\n                        bankedTurnMultiplier={2}\r\n                        noRotationConstraint={true}\r\n                    />\r\n                    <hemisphericLight\r\n                        name=\"light1\"\r\n                        intensity={0.7}\r\n                        direction={new Vector3(0.5, 1, 0)}\r\n                    />\r\n                    <Skybox size={10000} rootUrl=\"/get-them-deathstars/static/images/space-skybox/\" name={'skybox'} />\r\n                </Scene>\r\n            </Engine>\r\n        </div>\r\n    );\r\n}\r\n","import { Container, Grid, Paper } from \"@mui/material\";\nimport XWingScene from \"./components/x-wing-scene\";\n\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper id='tab-content-container' elevation={2}>\n        <Grid container item direction=\"column\" alignItems={'center'} justifyContent={'space-around'}>\n          <Grid item>\n            <XWingScene />\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);"],"sourceRoot":""}